asyncapi: 2.2.0
info:
  title: Game Websocket API
  version: '1.0.0'
  description: |
    This document describes the websocket API for real-time interaction between
    clients and the server in the game application.

servers:
  production:
    url: wss://game.example.com
    protocol: wss
    description: Secure websocket server for the game

channels:
  '/':
    description: Main websocket channel for communication
    subscribe:
      operationId: receiveMessages
      summary: Receive messages from the server
      message:
        oneOf:
          - $ref: '#/components/messages/pixelUpdateNotification'
          - $ref: '#/components/messages/cooldownUpdateNotification'
          - $ref: '#/components/messages/userBanNotification'
          - $ref: '#/components/messages/gameResetNotification'
          - $ref: '#/components/messages/fieldStateResponse'
    publish:
      operationId: sendMessages
      summary: Send messages to the server
      message:
        oneOf:
          - $ref: '#/components/messages/loginRequest'
          - $ref: '#/components/messages/adminLoginRequest'
          - $ref: '#/components/messages/pixelUpdateRequest'
          - $ref: '#/components/messages/pixelInfoRequest'
          - $ref: '#/components/messages/changeCooldownRequest'
          - $ref: '#/components/messages/resetGameRequest'
          - $ref: '#/components/messages/banUserRequest'


components:
  messages:
    pixelUpdateNotification:
      name: PixelUpdateNotification
      title: Pixel Update Notification
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'pixel_update_notification' ]
          data:
            type: object
            properties:
              x: { type: integer }
              y: { type: integer }
              color: { type: string, format: hex }
              nickname: { type: string }

    # Define other messages like cooldownUpdateNotification, userBanNotification, etc., similar to pixelUpdateNotification.

    loginRequest:
      name: LoginRequest
      title: Login Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'login' ]
          nickname: { type: string }
          # Для административного входа потребуется другой тип запроса:
    adminLoginRequest:
      name: AdminLoginRequest
      title: Admin Login Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'login_admin' ]
          token: { type: string }

    # Define other request messages similar to loginRequest.
    cooldownUpdateNotification:
      name: CooldownUpdateNotification
      title: Cooldown Update Notification
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'cooldown_update_notification' ]
          data:
            type: integer
            description: The new cooldown time in seconds.

    userBanNotification:
      name: UserBanNotification
      title: User Ban Notification
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'user_ban_notification' ]
          data:
            type: object
            properties:
              user_id:
                type: string
              status:
                type: string
                enum: [ 'banned', 'unbanned' ]

    gameResetNotification:
      name: GameResetNotification
      title: Game Reset Notification
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'game_reset_notification' ]

    fieldStateResponse:
      name: FieldStateResponse
      title: Field State Response
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'field_state_response' ]
          size:
            type: array
            items:
              type: integer
          cooldown:
            type: integer
          data:
            type: object
            properties:
              pixels:
                type: array
                items:
                  Pixel:
                    type: object
                    properties:
                      x: { type: integer }
                      y: { type: integer }
                      color: { type: string, format: hex }
                      nickname: { type: string }
              selections:
                type: array
                items:
                  Selection:
                    type: object
                    properties:
                      x: { type: integer }
                      y: { type: integer }
                      color: { type: string, format: hex }
                      nickname: { type: string }

    pixelUpdateRequest:
      name: PixelUpdateRequest
      title: Pixel Update Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'update_pixel' ]
          data:
            type: object
            properties:
              x: { type: integer }
              y: { type: integer }
              color: { type: string, format: hex }

    pixelInfoRequest:
      name: PixelInfoRequest
      title: Pixel Info Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'pixel_info' ]
          data:
            type: object
            properties:
              x: { type: integer }
              y: { type: integer }


    changeCooldownRequest:
      name: ChangeCooldownRequest
      title: Change Cooldown Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'update_cooldown_admin' ]
          data: { type: integer }

    resetGameRequest:
      name: ResetGameRequest
      title: Reset Game Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'reset_game_admin' ]

    banUserRequest:
      name: BanUserRequest
      title: Ban User Request
      contentType: application/json
      payload:
        type: object
        properties:
          type:
            type: string
            enum: [ 'toggle_ban_user_admin' ]
          data:
            type: object
            properties:
              user_id: { type: string }
          status:
            type: string
            enum: [ 'ban', 'unban' ]
